// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proxy

import (
	"sync"
)

// Ensure, that StatsClientMock does implement StatsClient.
// If this is not the case, regenerate this file with moq.
var _ StatsClient = &StatsClientMock{}

// StatsClientMock is a mock implementation of StatsClient.
//
//	func TestSomethingThatUsesStatsClient(t *testing.T) {
//
//		// make and configure a mocked StatsClient
//		mockedStatsClient := &StatsClientMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetMemUsageFunc: func() (uint64, error) {
//				panic("mock out the GetMemUsage method")
//			},
//		}
//
//		// use mockedStatsClient in code that requires StatsClient
//		// and then make assertions.
//
//	}
type StatsClientMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetMemUsageFunc mocks the GetMemUsage method.
	GetMemUsageFunc func() (uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetMemUsage holds details about calls to the GetMemUsage method.
		GetMemUsage []struct {
		}
	}
	lockClose       sync.RWMutex
	lockGetMemUsage sync.RWMutex
}

// Close calls CloseFunc.
func (mock *StatsClientMock) Close() error {
	if mock.CloseFunc == nil {
		panic("StatsClientMock.CloseFunc: method is nil but StatsClient.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedStatsClient.CloseCalls())
func (mock *StatsClientMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetMemUsage calls GetMemUsageFunc.
func (mock *StatsClientMock) GetMemUsage() (uint64, error) {
	if mock.GetMemUsageFunc == nil {
		panic("StatsClientMock.GetMemUsageFunc: method is nil but StatsClient.GetMemUsage was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMemUsage.Lock()
	mock.calls.GetMemUsage = append(mock.calls.GetMemUsage, callInfo)
	mock.lockGetMemUsage.Unlock()
	return mock.GetMemUsageFunc()
}

// GetMemUsageCalls gets all the calls that were made to GetMemUsage.
// Check the length with:
//
//	len(mockedStatsClient.GetMemUsageCalls())
func (mock *StatsClientMock) GetMemUsageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMemUsage.RLock()
	calls = mock.calls.GetMemUsage
	mock.lockGetMemUsage.RUnlock()
	return calls
}
