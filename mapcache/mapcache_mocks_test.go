// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mapcache

import (
	"context"
	"sync"
)

// Ensure, that FillerMock does implement Filler.
// If this is not the case, regenerate this file with moq.
var _ Filler = &FillerMock{}

// FillerMock is a mock implementation of Filler.
//
//	func TestSomethingThatUsesFiller(t *testing.T) {
//
//		// make and configure a mocked Filler
//		mockedFiller := &FillerMock{
//			GetBucketFunc: func(ctx context.Context, options NewOptions, hashRange HashRange) func() (GetBucketResponse, error) {
//				panic("mock out the GetBucket method")
//			},
//		}
//
//		// use mockedFiller in code that requires Filler
//		// and then make assertions.
//
//	}
type FillerMock struct {
	// GetBucketFunc mocks the GetBucket method.
	GetBucketFunc func(ctx context.Context, options NewOptions, hashRange HashRange) func() (GetBucketResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBucket holds details about calls to the GetBucket method.
		GetBucket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Options is the options argument value.
			Options NewOptions
			// HashRange is the hashRange argument value.
			HashRange HashRange
		}
	}
	lockGetBucket sync.RWMutex
}

// GetBucket calls GetBucketFunc.
func (mock *FillerMock) GetBucket(ctx context.Context, options NewOptions, hashRange HashRange) func() (GetBucketResponse, error) {
	if mock.GetBucketFunc == nil {
		panic("FillerMock.GetBucketFunc: method is nil but Filler.GetBucket was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Options   NewOptions
		HashRange HashRange
	}{
		Ctx:       ctx,
		Options:   options,
		HashRange: hashRange,
	}
	mock.lockGetBucket.Lock()
	mock.calls.GetBucket = append(mock.calls.GetBucket, callInfo)
	mock.lockGetBucket.Unlock()
	return mock.GetBucketFunc(ctx, options, hashRange)
}

// GetBucketCalls gets all the calls that were made to GetBucket.
// Check the length with:
//
//	len(mockedFiller.GetBucketCalls())
func (mock *FillerMock) GetBucketCalls() []struct {
	Ctx       context.Context
	Options   NewOptions
	HashRange HashRange
} {
	var calls []struct {
		Ctx       context.Context
		Options   NewOptions
		HashRange HashRange
	}
	mock.lockGetBucket.RLock()
	calls = mock.calls.GetBucket
	mock.lockGetBucket.RUnlock()
	return calls
}

// Ensure, that FillerFactoryMock does implement FillerFactory.
// If this is not the case, regenerate this file with moq.
var _ FillerFactory = &FillerFactoryMock{}

// FillerFactoryMock is a mock implementation of FillerFactory.
//
//	func TestSomethingThatUsesFillerFactory(t *testing.T) {
//
//		// make and configure a mocked FillerFactory
//		mockedFillerFactory := &FillerFactoryMock{
//			NewFunc: func(params interface{}) Filler {
//				panic("mock out the New method")
//			},
//		}
//
//		// use mockedFillerFactory in code that requires FillerFactory
//		// and then make assertions.
//
//	}
type FillerFactoryMock struct {
	// NewFunc mocks the New method.
	NewFunc func(params interface{}) Filler

	// calls tracks calls to the methods.
	calls struct {
		// New holds details about calls to the New method.
		New []struct {
			// Params is the params argument value.
			Params interface{}
		}
	}
	lockNew sync.RWMutex
}

// New calls NewFunc.
func (mock *FillerFactoryMock) New(params interface{}) Filler {
	if mock.NewFunc == nil {
		panic("FillerFactoryMock.NewFunc: method is nil but FillerFactory.New was just called")
	}
	callInfo := struct {
		Params interface{}
	}{
		Params: params,
	}
	mock.lockNew.Lock()
	mock.calls.New = append(mock.calls.New, callInfo)
	mock.lockNew.Unlock()
	return mock.NewFunc(params)
}

// NewCalls gets all the calls that were made to New.
// Check the length with:
//
//	len(mockedFillerFactory.NewCalls())
func (mock *FillerFactoryMock) NewCalls() []struct {
	Params interface{}
} {
	var calls []struct {
		Params interface{}
	}
	mock.lockNew.RLock()
	calls = mock.calls.New
	mock.lockNew.RUnlock()
	return calls
}
