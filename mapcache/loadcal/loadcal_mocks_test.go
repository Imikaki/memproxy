// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package loadcal

import (
	"sync"
)

// Ensure, that BoundCheckerMock does implement BoundChecker.
// If this is not the case, regenerate this file with moq.
var _ BoundChecker = &BoundCheckerMock{}

// BoundCheckerMock is a mock implementation of BoundChecker.
//
// 	func TestSomethingThatUsesBoundChecker(t *testing.T) {
//
// 		// make and configure a mocked BoundChecker
// 		mockedBoundChecker := &BoundCheckerMock{
// 			CheckFunc: func(input CheckBoundInput) CheckBoundOutput {
// 				panic("mock out the Check method")
// 			},
// 		}
//
// 		// use mockedBoundChecker in code that requires BoundChecker
// 		// and then make assertions.
//
// 	}
type BoundCheckerMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(input CheckBoundInput) CheckBoundOutput

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Input is the input argument value.
			Input CheckBoundInput
		}
	}
	lockCheck sync.RWMutex
}

// Check calls CheckFunc.
func (mock *BoundCheckerMock) Check(input CheckBoundInput) CheckBoundOutput {
	if mock.CheckFunc == nil {
		panic("BoundCheckerMock.CheckFunc: method is nil but BoundChecker.Check was just called")
	}
	callInfo := struct {
		Input CheckBoundInput
	}{
		Input: input,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(input)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//     len(mockedBoundChecker.CheckCalls())
func (mock *BoundCheckerMock) CheckCalls() []struct {
	Input CheckBoundInput
} {
	var calls []struct {
		Input CheckBoundInput
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}
